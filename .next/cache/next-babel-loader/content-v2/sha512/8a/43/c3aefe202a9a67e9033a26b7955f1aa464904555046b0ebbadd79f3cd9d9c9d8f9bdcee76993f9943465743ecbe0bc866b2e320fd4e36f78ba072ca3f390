{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/user/Desktop/next-js/pages/article/[id]/index.js\";\nimport { server } from '../../config';\nimport Link from 'next/link';\nimport { useRouter } from 'next/router';\n\nconst article = ({\n  article\n}) => {\n  //const router = useRouter()\n  //const { id } = router.query\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: article.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: article.body\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      href: \"/\",\n      children: \"Go back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 3\n  }, this);\n};\n\nexport const getStaticProps = async serverResponse => {\n  const res = await fetch(`${server}/api/article/${serverResponse.params.id}`);\n  const article = await res.json();\n  return {\n    props: {\n      article\n    }\n  };\n};\nexport const getStaticPaths = async () => {\n  const res = await fetch(`${server}/api/articles`);\n  const articles = await res.json();\n  const ids = articles.map(article => article.id);\n  const paths = ids.map(id => ({\n    params: {\n      id: id.toString()\n    }\n  }));\n  return {\n    paths,\n    fallback: false\n  };\n}; // call when request is made\n\n/*export const getServerSideProps = async (serverResponse) => {\n\tconst res = await fetch(`https://jsonplaceholder.typicode.com/posts/${serverResponse.params.id}`)\n\tconst article = await res.json();\n\n\treturn {\n\t\tprops: { \n\t\t\tarticle\n\t\t}\n\t}\n}*/\n// beter way for static websites\n\n/* export const getStaticProps = async (serverResponse) => {\n\tconst res = await fetch(`https://jsonplaceholder.typicode.com/posts/${serverResponse.params.id}`)\n\tconst article = await res.json();\n\n\treturn {\n\t\tprops: { \n\t\t\tarticle\n\t\t}\n\t}\n}\n\nexport const getStaticPaths = async () => {\n\tconst res = await fetch(\n\t\t`https://jsonplaceholder.typicode.com/posts`\n\t)\n\tconst articles = await res.json();\n\n\tconst ids = articles.map((article) => article.id);\n\n\tconst paths = ids.map((id) => ({ \n\t\tparams: {\n\t\t\tid: id.toString() \n\t\t} \n\t}));\n\n\treturn {\n\t\tpaths,\n\t\tfallback: false\n\t}\n} */\n\nexport default article;","map":{"version":3,"sources":["/Users/user/Desktop/next-js/pages/article/[id]/index.js"],"names":["server","Link","useRouter","article","title","body","getStaticProps","serverResponse","res","fetch","params","id","json","props","getStaticPaths","articles","ids","map","paths","toString","fallback"],"mappings":";;AAAA,SAAQA,MAAR,QAAqB,cAArB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAAQC,SAAR,QAAwB,aAAxB;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAACA,EAAAA;AAAD,CAAD,KAAe;AAC9B;AACA;AAEA,sBACC;AAAA,4BACC;AAAA,gBAAKA,OAAO,CAACC;AAAb;AAAA;AAAA;AAAA;AAAA,YADD,eAEC;AAAA,gBAAID,OAAO,CAACE;AAAZ;AAAA;AAAA;AAAA;AAAA,YAFD,eAGC;AAAA;AAAA;AAAA;AAAA,YAHD,eAIC,QAAC,IAAD;AAAM,MAAA,IAAI,EAAC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAQA,CAZD;;AAcA,OAAO,MAAMC,cAAc,GAAG,MAAOC,cAAP,IAA0B;AACvD,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAET,MAAO,gBAAeO,cAAc,CAACG,MAAf,CAAsBC,EAAG,EAAnD,CAAvB;AACA,QAAMR,OAAO,GAAG,MAAMK,GAAG,CAACI,IAAJ,EAAtB;AAEA,SAAO;AACNC,IAAAA,KAAK,EAAE;AACNV,MAAAA;AADM;AADD,GAAP;AAKA,CATM;AAWP,OAAO,MAAMW,cAAc,GAAG,YAAY;AACzC,QAAMN,GAAG,GAAG,MAAMC,KAAK,CACrB,GAAET,MAAO,eADY,CAAvB;AAGA,QAAMe,QAAQ,GAAG,MAAMP,GAAG,CAACI,IAAJ,EAAvB;AAEA,QAAMI,GAAG,GAAGD,QAAQ,CAACE,GAAT,CAAcd,OAAD,IAAaA,OAAO,CAACQ,EAAlC,CAAZ;AAEA,QAAMO,KAAK,GAAGF,GAAG,CAACC,GAAJ,CAASN,EAAD,KAAS;AAC9BD,IAAAA,MAAM,EAAE;AACPC,MAAAA,EAAE,EAAEA,EAAE,CAACQ,QAAH;AADG;AADsB,GAAT,CAAR,CAAd;AAMA,SAAO;AACND,IAAAA,KADM;AAENE,IAAAA,QAAQ,EAAE;AAFJ,GAAP;AAIA,CAlBM,C,CAoBP;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAejB,OAAf","sourcesContent":["import {server} from '../../config';\nimport Link from 'next/link';\nimport {useRouter} from 'next/router';\n\nconst article = ({article}) => {\n\t//const router = useRouter()\n\t//const { id } = router.query\n\n\treturn (\n\t\t<span>\n\t\t\t<h1>{article.title}</h1>\n\t\t\t<p>{article.body}</p>\n\t\t\t<br />\n\t\t\t<Link href=\"/\">Go back</Link>\n\t\t</span>\n\t)\n}\n\nexport const getStaticProps = async (serverResponse) => {\n\tconst res = await fetch(`${server}/api/article/${serverResponse.params.id}`)\n\tconst article = await res.json();\n\n\treturn {\n\t\tprops: { \n\t\t\tarticle\n\t\t}\n\t}\n}\n\nexport const getStaticPaths = async () => {\n\tconst res = await fetch(\n\t\t`${server}/api/articles`\n\t)\n\tconst articles = await res.json();\n\n\tconst ids = articles.map((article) => article.id);\n\n\tconst paths = ids.map((id) => ({ \n\t\tparams: {\n\t\t\tid: id.toString() \n\t\t} \n\t}));\n\n\treturn {\n\t\tpaths,\n\t\tfallback: false\n\t}\n}\n\n// call when request is made\n/*export const getServerSideProps = async (serverResponse) => {\n\tconst res = await fetch(`https://jsonplaceholder.typicode.com/posts/${serverResponse.params.id}`)\n\tconst article = await res.json();\n\n\treturn {\n\t\tprops: { \n\t\t\tarticle\n\t\t}\n\t}\n}*/\n\n// beter way for static websites\n/* export const getStaticProps = async (serverResponse) => {\n\tconst res = await fetch(`https://jsonplaceholder.typicode.com/posts/${serverResponse.params.id}`)\n\tconst article = await res.json();\n\n\treturn {\n\t\tprops: { \n\t\t\tarticle\n\t\t}\n\t}\n}\n\nexport const getStaticPaths = async () => {\n\tconst res = await fetch(\n\t\t`https://jsonplaceholder.typicode.com/posts`\n\t)\n\tconst articles = await res.json();\n\n\tconst ids = articles.map((article) => article.id);\n\n\tconst paths = ids.map((id) => ({ \n\t\tparams: {\n\t\t\tid: id.toString() \n\t\t} \n\t}));\n\n\treturn {\n\t\tpaths,\n\t\tfallback: false\n\t}\n} */\n\nexport default article"]},"metadata":{},"sourceType":"module"}