{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/user/Desktop/next-js/pages/article/[id]/index.js\",\n    _this = this;\n\nimport Link from 'next/link';\nimport { useRouter } from 'next/router';\n\nvar Article = function Article(_ref) {\n  var article = _ref.article;\n  //const router = useRouter()\n  //const { id } = router.query\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: article.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 4\n    }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: article.body\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 4\n    }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 4\n    }, _this), /*#__PURE__*/_jsxDEV(Link, {\n      href: \"/\",\n      children: \"Go back\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 4\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 3\n  }, _this);\n}; // call when request is made\n\n/*export const getServerSideProps = async (serverResponse) => {\n\tconst res = await fetch(`https://jsonplaceholder.typicode.com/posts/${serverResponse.params.id}`)\n\tconst article = await res.json();\n\n\treturn {\n\t\tprops: { \n\t\t\tarticle\n\t\t}\n\t}\n}*/\n// beter way for static websites\n\n\n_c = Article;\nexport var __N_SSG = true;\nexport default Article;\n\nvar _c;\n\n$RefreshReg$(_c, \"Article\");","map":{"version":3,"sources":["/Users/user/Desktop/next-js/pages/article/[id]/index.js"],"names":["Link","useRouter","Article","article","title","body"],"mappings":";;;;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,SAAQC,SAAR,QAAwB,aAAxB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,OAAe;AAAA,MAAbC,OAAa,QAAbA,OAAa;AAC9B;AACA;AAEA,sBACC;AAAA,4BACC;AAAA,gBAAKA,OAAO,CAACC;AAAb;AAAA;AAAA;AAAA;AAAA,aADD,eAEC;AAAA,gBAAID,OAAO,CAACE;AAAZ;AAAA;AAAA;AAAA;AAAA,aAFD,eAGC;AAAA;AAAA;AAAA;AAAA,aAHD,eAIC,QAAC,IAAD;AAAM,MAAA,IAAI,EAAC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAJD;AAAA;AAAA;AAAA;AAAA;AAAA,WADD;AAQA,CAZD,C,CAcA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;KA1BMH,O;;AAyCN,eAAeA,OAAf","sourcesContent":["import Link from 'next/link';\nimport {useRouter} from 'next/router';\n\nconst Article = ({article}) => {\n\t//const router = useRouter()\n\t//const { id } = router.query\n\n\treturn (\n\t\t<span>\n\t\t\t<h1>{article.title}</h1>\n\t\t\t<p>{article.body}</p>\n\t\t\t<br />\n\t\t\t<Link href=\"/\">Go back</Link>\n\t\t</span>\n\t)\n}\n\n// call when request is made\n/*export const getServerSideProps = async (serverResponse) => {\n\tconst res = await fetch(`https://jsonplaceholder.typicode.com/posts/${serverResponse.params.id}`)\n\tconst article = await res.json();\n\n\treturn {\n\t\tprops: { \n\t\t\tarticle\n\t\t}\n\t}\n}*/\n\n// beter way for static websites\nexport const getStaticProps = async () => {\n\tconst res = await fetch(`https://jsonplaceholder.typicode.com/posts/`)\n\tconst articles = await res.json();\n\n\tconst ids = articles.map(article => article.id);\n\n\tconst paths = ids.map(id => ({params: {id: id.toString}}));\n\n\treturn {\n\t\tpaths,\n\t\tfallback: false\n\t}\n}\n\nexport default Article"]},"metadata":{},"sourceType":"module"}